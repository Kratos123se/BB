#9A
!pip install nltk
import nltk
nltk.download('treebank')
import nltk.parse.viterbi
import nltk.parse.pchart
def give(t):
  return t.label() == 'VP' and len(t) > 2 and t[1].label() == 'NP' \
  and (t[2].label() == 'PP-DTV' or t[2].label() == 'NP') \
  and ('give' in t[0].leaves() or 'gave' in t[0].leaves())
def sent(t):
  return ' '.join(token for token in t.leaves() if token[0] not in '*-0')
def print_node(t, width):
  output = "%s %s: %s / %s: %s" % \
  (sent(t[0]), t[1].label(), sent(t[1]), t[2].label(), sent(t[2]))
  if len(output) > width:
    output = output[:width] + "..."
  print(output)
for tree in nltk.corpus.treebank.parsed_sents():
  for t in tree.subtrees(give):
    print_node(t, 72)

#9B_Statistical parsing Usage of Give and Gave in the Penn Treebank sample
import nltk
from nltk import PCFG
grammar = PCFG.fromstring('''
NP -> NNS [0.5] | JJ NNS [0.3] | NP CC NP [0.2]
NNS -> "men" [0.1] | "women" [0.2] | "children" [0.3] | NNS CC NNS [0.4]
JJ -> "old" [0.4] | "young" [0.6]
CC -> "and" [0.9] | "or" [0.1]
''')
print(grammar)
viterbi_parser = nltk.ViterbiParser(grammar)
token = "old men and women".split()
obj = viterbi_parser.parse(token)
print("Output: ")
for x in obj:
  print(x)

#9b_cont
!pip install nltk
import nltk
nltk.download('all')
from nltk.parse.malt import MaltParser
# Load MaltParser with the pre-trained model
malt_parser = MaltParser()
# Define the sentence to parse
sentence = "I saw a bird from my window"
# Parse the sentence
parsed_sentence = malt_parser.parse_one(sentence.split())
# Print the dependency parse tree
print(parsed_sentence.tree())

